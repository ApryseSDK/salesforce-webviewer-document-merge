var resourceURL = '/resource/'
window.CoreControls.forceBackendType('ems');

var urlSearch = new URLSearchParams(location.hash)
var custom = JSON.parse(urlSearch.get('custom'));
resourceURL = resourceURL + custom.namespacePrefix;

/**
 * The following `window.CoreControls.set*` functions point WebViewer to the
 * optimized source code specific for the Salesforce platform, to ensure the
 * uploaded files stay under the 5mb limit
 */
// office workers
window.CoreControls.setOfficeWorkerPath(resourceURL + 'office')
window.CoreControls.setOfficeAsmPath(resourceURL + 'office_asm');
window.CoreControls.setOfficeResourcePath(resourceURL + 'office_resource');

// pdf workers
window.CoreControls.setPDFResourcePath(resourceURL + 'resource')
if (custom.fullAPI) {
  window.CoreControls.setPDFWorkerPath(resourceURL + 'pdf_full')
  window.CoreControls.setPDFAsmPath(resourceURL + 'asm_full');
} else {
  window.CoreControls.setPDFWorkerPath(resourceURL + 'pdf_lean')
  window.CoreControls.setPDFAsmPath(resourceURL + 'asm_lean');
}

// external 3rd party libraries
window.CoreControls.setExternalPath(resourceURL + 'external')
window.CoreControls.setCustomFontURL('https://pdftron.s3.amazonaws.com/custom/ID-zJWLuhTffd3c/vlocity/webfontsv20/');

async function mergeAndDowloadPDFs(event) {
  const { temprecords } = event.data; //array of documents
  let currentIndex = 0;
  //load first doc
  let initialDoc = await window.CoreControls.createDocument(
    temprecords[currentIndex].blob,
    {
      extension: temprecords[currentIndex].extension,
      docId: temprecords[currentIndex].documentId,
      filename: temprecords[currentIndex].filename
    }
  );

  //append other docs if present
  if (temprecords.length > 1) {
    currentIndex = 1;

    //iterate through remaining docs in array, and add them to first doc
    while (initialDoc && currentIndex < temprecords.length) {
      let docToBeAdded = await window.CoreControls.createDocument(
        temprecords[currentIndex].blob,
        {
          extension: temprecords[currentIndex].extension,
          docId: temprecords[currentIndex].documentId,
          filename: temprecords[currentIndex].filename
        }
      );
      await initialDoc.insertPages(docToBeAdded);
      currentIndex++;
    }
  }

  const data = await initialDoc.getFileData();
  const arr = new Uint8Array(data);
  const blob = new Blob([arr], { type: 'application/pdf' });

  //load document in WebViewer
  event.target.readerControl.loadDocument(blob, { /*options used when downloading document */ extension: 'pdf', filename: 'mergedDoc', documentId: 'my_document_id' });

  //download document
  const annotManager = readerControl.annotManager;
  const xfdfString = await annotManager.exportAnnotations();
  const saveOptions = window.CoreControls.SaveOptions;
  const options = {
    filename: 'myDocument.pdf',
    xfdfString, // remove if you do not want annotations as part of your document
    flags: saveOptions.LINEARIZED, // linearized documents allow for optimized loadtimes
    downloadType: 'pdf'
  };

  event.target.readerControl.downloadPdf(options);
}

window.addEventListener("message", receiveMessage, false);

async function receiveMessage(event) {
  if (event.isTrusted && typeof event.data === 'object') {
    switch (event.data.type) {
      case 'OPEN_DOCUMENT_LIST':
        mergeAndDowloadPDFs(event);
        break;
      default:
        break;
    }
  }
}
